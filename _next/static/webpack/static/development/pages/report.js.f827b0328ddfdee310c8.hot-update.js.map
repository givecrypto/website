{"version":3,"file":"static/webpack/static/development/pages/report.js.f827b0328ddfdee310c8.hot-update.js","sources":["webpack:///./components/Metrics/Income/index.tsx","webpack:///./components/Tip.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport { colors } from \"../../../design-system\";\nimport { isEmpty } from \"lodash\";\nimport {\n  totalParticipants,\n  gender,\n} from \"../../../content/ambassadors-report/metrics\";\nimport Tip from \"../../../components/Tip\";\n\ninterface Props {}\nconst Income: React.FC<Props> = () => {\n  const [value, setValue]: any = React.useState({});\n\n  return (\n    <div>\n      <p>Income Metrics</p>\n      <RadialChart\n        colorRange={[colors.greyDark, colors.blueDark, colors.blue]}\n        animation\n        data={gender}\n        width={300}\n        height={300}\n        showLabels\n        onValueMouseOver={(v: any) => {\n          setValue({\n            data: v,\n            title: gender.find(item => item.label === v.label).label,\n            metrics: [\n              {\n                label: \"Total\",\n                value:\n                  totalParticipants *\n                  (gender.find(item => item.label === v.label).angle * 0.01),\n              },\n              {\n                label: \"Percentage\",\n                value: gender.find(item => item.label === v.label).angle,\n              },\n            ],\n          });\n        }}\n        onSeriesMouseOut={(v: any) => setValue({})}\n      >\n        {!isEmpty(value) && (\n          <Hint value={value.data}>\n            <Tip title={value.title} metrics={value.metrics} />\n          </Hint>\n        )}\n      </RadialChart>\n    </div>\n  );\n};\n\nexport default Income;\n","import * as React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { shadows, colors } from \"../design-system\";\n\nconst Container = styled.div({\n  borderRadius: 12,\n  backgroundColor: colors.coldWater,\n  opacity: 0.95,\n  padding: \"0.25rem 1rem\",\n  boxShadow: shadows.card,\n});\n\ninterface Metric {\n  label: string;\n  value: string;\n}\ninterface Props {\n  title: string;\n  metrics: Metric[];\n}\nconst Tip: React.FunctionComponent<Props> = props => {\n  return (\n    <Container>\n      <h3>{props.title}</h3>\n      {props.metrics.map(({ label, value }) => (\n        <p>\n          {label}: {value}\n        </p>\n      ))}\n    </Container>\n  );\n};\n\nexport default Tip;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAJA;AAOA;AACA;AAAA;AAAA;AAFA;AAVA;AAgBA;AACA;AAAA;AAAA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAeA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;;;;A","sourceRoot":""}